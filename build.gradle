apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.polter.mobipolter"
        minSdkVersion 15
        targetSdkVersion 28
        versionCode 11
        versionName "1.5"
        multiDexEnabled true
        flavorDimensions "default"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        resValue 'string', 'images_file_path', "Android/data/" + applicationId + "/files/Pictures"
        resValue 'string', 'videos_file_path', "Android/data/" + applicationId + "/files/Videos"
    }

    signingConfigs {
        qa {
            keyAlias 'polterqa'
            keyPassword 'qapolter123'
            storePassword 'qapolter123'
            storeFile file('/home/webwerks/polterapp/app/keystores/appqa.jks')
        }
        release {
            keyAlias 'polterrelease'
            keyPassword 'apprelease123'
            storeFile file('/home/webwerks/polterapp/app/keystores/apprelease.jks')
            storePassword 'apprelease123'
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        qa {
            minifyEnabled false
            debuggable true
            signingConfig signingConfigs.qa
        }

    }
    flavorDimensions "version"
    productFlavors {
        free {
            applicationId "com.polter.mobipolter.free"
            versionName "1.1-free"
            // this boolean can be accessed in java classes by using BuildConfig class
            // and now you can identify if your app is the paid version or not
            buildConfigField "boolean", "PAID_VERSION", "false"
            dimension "version"
        }

        paid {
            applicationId "com.polter.mobipolter"
            versionName "1.5"
            buildConfigField "boolean", "PAID_VERSION", "true"
            dimension "version"
        }
    }


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    bundle {

        language {
            enableSplit = false
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation 'com.android.support:recyclerview-v7:28.0.0'
    implementation 'com.android.support:support-v4:28.0.0'
    implementation 'com.android.support:design:28.0.0'
    implementation 'com.google.android.gms:play-services-maps:15.0.0'
    implementation 'com.google.android.gms:play-services-location:15.0.0'
    implementation 'com.madgag:scpkix-jdk15on:1.47.0.1'
    implementation 'com.itextpdf:itextpdf:5.5.10'
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation files('libs/jxl-2.6.12.jar')

    // ViewModel and LiveData

    /*implementation "android.lifecycle:lifecycle-extensions:2.0.0"
        annotationProcessor "android.lifecycle:lifecycle-compiler:2.0.0"

        // Room database

        implementation "android.room:room-runtime:2.2.0-alpha01"
        annotationProcessor "android.room:room-compiler:2.2.0-alpha01"*/
    def lifecycle_version = "1.1.1"

    // ViewModel and LiveData
    implementation "android.arch.lifecycle:extensions:$lifecycle_version"

    // alternatively - just ViewModel
    implementation "android.arch.lifecycle:viewmodel:$lifecycle_version"

    // For Kotlin use viewmodel-ktx

    // alternatively - just LiveData
    implementation "android.arch.lifecycle:livedata:$lifecycle_version"

    // alternatively - Lifecycles only (no ViewModel or LiveData).

    //     Support library depends on this lightweight import
    implementation "android.arch.lifecycle:runtime:$lifecycle_version"
    kapt "android.arch.lifecycle:compiler:$lifecycle_version"

    // For Kotlin use kapt instead of annotationProcessor

    // alternately - if using Java8, use the following instead of compiler
    implementation "android.arch.lifecycle:common-java8:$lifecycle_version"

    //  implementation 'androidx.appcompat:appcompat:1.1.0-rc01'
    def room_version = "1.1.1"
    implementation "android.arch.persistence.room:runtime:$room_version"
    kapt "android.arch.persistence.room:compiler:$room_version"

    // For Kotlin use kapt instead of annotationProcessor

    // optional - RxJava support for Room
    implementation "android.arch.persistence.room:rxjava2:$room_version"

    // GSON
    implementation 'com.google.code.gson:gson:2.8.2'

    //COMPRESSOR
    implementation 'id.zelory:compressor:2.1.0'

    //CROPPER
    implementation 'com.theartofdev.edmodo:android-image-cropper:2.6.0'
}
